import { 
  PrismaClient, 
  QuestType, 
  QuestStatus, 
  UserRole, 
  EffectType, 
  RewardCategory, 
  AchievementCategory, 
  ItemCategory, 
  Rarity, 
  ActivityType 
} from '@prisma/client'

const prisma = new PrismaClient()

async function main() {
  console.log('üå± Starting database seeding...')

  // Clean up existing data (in correct order due to foreign key constraints)
  await prisma.activityLog.deleteMany()
  await prisma.inventoryItem.deleteMany()
  await prisma.characterAchievement.deleteMany()
  await prisma.achievement.deleteMany()
  await prisma.purchase.deleteMany()
  await prisma.reward.deleteMany()
  await prisma.effect.deleteMany()
  await prisma.quest.deleteMany()
  await prisma.character.deleteMany()
  await prisma.guild.deleteMany()
  await prisma.session.deleteMany()
  await prisma.account.deleteMany()
  await prisma.user.deleteMany()

  console.log('üßπ Cleaned existing data')

  // Create test users
  const guildmaster = await prisma.user.create({
    data: {
      id: 'gm-user-id',
      name: '–ì–∏–ª–¥-–º–∞—Å—Ç–µ—Ä',
      email: 'guildmaster@example.com',
      role: 'GUILDMASTER',
    }
  })

  const player1 = await prisma.user.create({
    data: {
      id: 'player1-user-id',
      name: '–ê–ª–∏—Å–∞',
      email: 'alice@example.com',
      role: 'PLAYER',
    }
  })

  const player2 = await prisma.user.create({
    data: {
      id: 'player2-user-id',
      name: '–ú–∞–∫—Å',
      email: 'max@example.com',
      role: 'PLAYER',
    }
  })

  console.log('üë• Created test users')

  // Create test guild
  const guild = await prisma.guild.create({
    data: {
      id: 'test-guild-id',
      name: '–°–µ–º—å—è –î—Ä–∞–∫–æ–Ω–æ–±–æ—Ä—Ü–µ–≤',
      description: '–í–µ—Å–µ–ª–∞—è —Å–µ–º–µ–π–Ω–∞—è –≥–∏–ª—å–¥–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω—ã—Ö –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π!',
      code: 'DRAGON',
      memberCount: 3,
      activeQuests: 8,
      completedToday: 3,
      ownerId: guildmaster.id,
    }
  })

  // Update users with guild
  await prisma.user.updateMany({
    where: { id: { in: [guildmaster.id, player1.id, player2.id] } },
    data: { guildId: guild.id }
  })

  console.log('üè∞ Created test guild')

  // Create characters
  const aliceCharacter = await prisma.character.create({
    data: {
      id: 'alice-char-id',
      userId: player1.id,
      guildId: guild.id,
      name: '–ê–ª–∏—Å–∞ –•—Ä–∞–±—Ä–∞—è',
      class: 'üõ°Ô∏è –ü–∞–ª–∞–¥–∏–Ω –ü–æ—Ä—è–¥–∫–∞',
      avatar: 'üë∏',
      level: 7,
      experience: 650,
      maxExperience: 1000,
      bronzeCoins: 12,
      silverCoins: 5,
      goldCoins: 2,
      streak: 5,
      completedQuests: 23,
      totalGoldEarned: 47,
      activeTitle: '–ú–∞—Å—Ç–µ—Ä –ü–æ—Ä—è–¥–∫–∞',
    }
  })

  const maxCharacter = await prisma.character.create({
    data: {
      id: 'max-char-id',
      userId: player2.id,
      guildId: guild.id,
      name: '–ú–∞–∫—Å –ú—É–¥—Ä–µ—Ü',
      class: 'üßô‚Äç‚ôÇÔ∏è –í–æ–ª—à–µ–±–Ω–∏–∫',
      avatar: 'üßô‚Äç‚ôÇÔ∏è',
      level: 4,
      experience: 180,
      maxExperience: 600,
      bronzeCoins: 8,
      silverCoins: 2,
      goldCoins: 1,
      streak: 3,
      completedQuests: 15,
      totalGoldEarned: 21,
    }
  })

  console.log('‚öîÔ∏è Created test characters')

  // Create test quests
  const quests = [
    {
      title: '–£—Ç—Ä–µ–Ω–Ω—è—è –∑–∞—Ä—è–¥–∫–∞',
      description: '–°–¥–µ–ª–∞–π 15 –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π –∏ 10 –æ—Ç–∂–∏–º–∞–Ω–∏–π',
      type: QuestType.DAILY,
      difficulty: 1,
      expReward: 50,
      bronzeReward: 3,
      silverReward: 0,
      goldReward: 0,
    },
    {
      title: '–ü–æ–º–æ–π –ø–æ—Å—É–¥—É –ø–æ—Å–ª–µ –∑–∞–≤—Ç—Ä–∞–∫–∞',
      description: '–¢—â–∞—Ç–µ–ª—å–Ω–æ –≤—ã–º–æ–π –≤—Å—é –ø–æ—Å—É–¥—É –∏ –ø–æ—Å—Ç–∞–≤—å –Ω–∞ –º–µ—Å—Ç–∞',
      type: QuestType.DAILY,
      difficulty: 1,
      expReward: 40,
      bronzeReward: 2,
      silverReward: 0,
      goldReward: 0,
    },
    {
      title: '–í—ã—É—á–∏ 10 –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤',
      description: '–ò–∑—É—á–∏ –∏ –∑–∞–ø–æ–º–Ω–∏ 10 –Ω–æ–≤—ã—Ö –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤ —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º',
      type: QuestType.EDUCATION,
      difficulty: 2,
      expReward: 150,
      bronzeReward: 5,
      silverReward: 2,
      goldReward: 0,
    },
    {
      title: '–û—Ä–≥–∞–Ω–∏–∑—É–π –∫–Ω–∏–∂–Ω—É—é –ø–æ–ª–∫—É',
      description: '–†–∞—Å—Å—Ç–∞–≤—å –≤—Å–µ –∫–Ω–∏–≥–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ –ø—Ä–æ—Ç—Ä–∏ –ø–æ–ª–∫–∏',
      type: QuestType.SPECIAL,
      difficulty: 2,
      expReward: 100,
      bronzeReward: 0,
      silverReward: 3,
      goldReward: 1,
      characterId: aliceCharacter.id,
      status: 'IN_PROGRESS',
      progress: 1,
      maxProgress: 3,
    },
    {
      title: '–ü–æ–º–æ–≥–∏ –±–∞–±—É—à–∫–µ —Å –ø–æ–∫—É–ø–∫–∞–º–∏',
      description: '–°—Ö–æ–¥–∏ –≤ –º–∞–≥–∞–∑–∏–Ω –∏ –ø–æ–º–æ–≥–∏ –¥–æ–Ω–µ—Å—Ç–∏ —Å—É–º–∫–∏',
      type: QuestType.FAMILY,
      difficulty: 1,
      expReward: 80,
      bronzeReward: 0,
      silverReward: 1,
      goldReward: 1,
      characterId: aliceCharacter.id,
      status: 'COMPLETED',
      completedAt: new Date(),
    },
    {
      title: '–ù–∞—Ä–∏—Å—É–π –∫–∞—Ä—Ç–∏–Ω—É',
      description: '–°–æ–∑–¥–∞–π –∫—Ä–∞—Å–∏–≤—É—é –∫–∞—Ä—Ç–∏–Ω—É –ª—é–±–æ–π —Ç–µ—Ö–Ω–∏–∫–æ–π',
      type: QuestType.CREATIVE,
      difficulty: 3,
      expReward: 200,
      bronzeReward: 0,
      silverReward: 5,
      goldReward: 2,
    },
    {
      title: '–ü—Ä–æ–±–µ–∂–∫–∞ –≤ –ø–∞—Ä–∫–µ',
      description: '–ü—Ä–æ–±–µ–≥–∏ 2 –∫–º –≤ –±–ª–∏–∂–∞–π—à–µ–º –ø–∞—Ä–∫–µ',
      type: QuestType.PHYSICAL,
      difficulty: 2,
      expReward: 120,
      bronzeReward: 3,
      silverReward: 2,
      goldReward: 0,
    },
    {
      title: '–ü—Ä–æ—á–∏—Ç–∞–π –≥–ª–∞–≤—É –∫–Ω–∏–≥–∏',
      description: '–ü—Ä–æ—á–∏—Ç–∞–π –æ–¥–Ω—É –≥–ª–∞–≤—É –∏–∑ —à–∫–æ–ª—å–Ω–æ–π –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã',
      type: QuestType.EDUCATION,
      difficulty: 1,
      expReward: 60,
      bronzeReward: 4,
      silverReward: 1,
      goldReward: 0,
      characterId: aliceCharacter.id,
      status: 'APPROVED',
      completedAt: new Date(Date.now() - 24 * 60 * 60 * 1000),
      approvedAt: new Date(),
    },
    {
      title: '–°–µ–º–µ–π–Ω–∞—è —É–±–æ—Ä–∫–∞',
      description: '–í–º–µ—Å—Ç–µ —É–±—Ä–∞—Ç—å –≤—Å—é –∫–≤–∞—Ä—Ç–∏—Ä—É –∑–∞ –æ–¥–∏–Ω –¥–µ–Ω—å',
      type: QuestType.GROUP,
      difficulty: 2,
      expReward: 200,
      bronzeReward: 0,
      silverReward: 0,
      goldReward: 3,
      maxProgress: 2,
    }
  ]

  for (const questData of quests) {
    await prisma.quest.create({
      data: {
        guildId: guild.id,
        ...questData,
      }
    })
  }

  console.log('üéØ Created test quests')

  // Create test effects
  await prisma.effect.create({
    data: {
      characterId: aliceCharacter.id,
      name: '–ë–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–µ –¢—Ä—É–¥–æ–ª—é–±–∏—è',
      type: EffectType.BLESSING,
      description: '–ü–æ–ª—É—á–∞–µ—Ç +50% –æ–ø—ã—Ç–∞ –∑–∞ –¥–æ–º–∞—à–Ω–∏–µ –¥–µ–ª–∞',
      icon: '‚ú®',
      duration: 3,
      maxDuration: 7,
      multipliers: { xpMultiplier: 1.5, questTypes: ['DAILY'] },
      reason: '–ó–∞ 5 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π',
    }
  })

  await prisma.effect.create({
    data: {
      characterId: aliceCharacter.id,
      name: '–£—Å—Ç–∞–ª–æ—Å—Ç—å',
      type: EffectType.DEBUFF,
      description: '–ü–æ–∑–¥–Ω–æ –ª–µ–≥ —Å–ø–∞—Ç—å, -25% —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
      icon: 'üò¥',
      duration: 1,
      maxDuration: 2,
      multipliers: { xpMultiplier: 0.75 },
      reason: '–õ–µ–≥ —Å–ø–∞—Ç—å –ø–æ—Å–ª–µ 22:00',
    }
  })

  await prisma.effect.create({
    data: {
      characterId: maxCharacter.id,
      name: '–ü—Ä–æ–∫–ª—è—Ç–∏–µ –ë–µ—Å–ø–æ—Ä—è–¥–∫–∞',
      type: EffectType.CURSE,
      description: '–ù–µ —É–±–∏—Ä–∞–ª –∫–æ–º–Ω–∞—Ç—É 3 –¥–Ω—è, –≤—Å–µ –Ω–∞–≥—Ä–∞–¥—ã -30%',
      icon: 'üå™Ô∏è',
      duration: 2,
      maxDuration: 5,
      multipliers: { coinMultiplier: 0.7, xpMultiplier: 0.8 },
      restrictions: { shopBlocked: false },
      reason: '–ù–µ —É–±–∏—Ä–∞–ª –∫–æ–º–Ω–∞—Ç—É 3 –¥–Ω—è –ø–æ–¥—Ä—è–¥',
    }
  })

  console.log('üé≠ Created test effects')

  // Create test rewards
  const rewards = [
    {
      name: '30 –º–∏–Ω—É—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
      description: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Å –ª—é–±–∏–º—ã–º–∏ –∏–≥—Ä–∞–º–∏',
      icon: 'üì±',
      category: RewardCategory.ENTERTAINMENT,
      rarity: Rarity.COMMON,
      silverCost: 3,
    },
    {
      name: '1 —á–∞—Å –∏–≥—Ä',
      description: '–í—Ä–µ–º—è –¥–ª—è –ª—é–±–∏–º—ã—Ö –≤–∏–¥–µ–æ–∏–≥—Ä',
      icon: 'üéÆ',
      category: RewardCategory.ENTERTAINMENT,
      rarity: Rarity.COMMON,
      goldCost: 1,
    },
    {
      name: '1 –µ–≤—Ä–æ',
      description: '–†–µ–∞–ª—å–Ω—ã–µ –¥–µ–Ω—å–≥–∏ –Ω–∞ –∫–∞—Ä–º–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã',
      icon: 'üí∞',
      category: RewardCategory.MONEY,
      rarity: Rarity.RARE,
      goldCost: 1,
    },
    {
      name: '5 –µ–≤—Ä–æ',
      description: '–ë–æ–ª—å—à–µ –¥–µ–Ω–µ–≥ –Ω–∞ –ª–∏—á–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏',
      icon: 'üíµ',
      category: RewardCategory.MONEY,
      rarity: Rarity.RARE,
      goldCost: 4,
      stock: 1,
    },
    {
      name: '–ü–æ—Ö–æ–¥ –≤ –∫–∏–Ω–æ',
      description: '–°–µ–º–µ–π–Ω—ã–π –ø–æ—Ö–æ–¥ –≤ –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä',
      icon: 'üçø',
      category: RewardCategory.ACTIVITIES,
      rarity: Rarity.EPIC,
      goldCost: 3,
      stock: 1,
    },
    {
      name: '–ù–∞–±–æ—Ä –¥–ª—è —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞',
      description: '–ù–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è',
      icon: 'üé®',
      category: RewardCategory.CREATIVE,
      rarity: Rarity.COMMON,
      silverCost: 5,
    },
    {
      name: '–ü–æ–∑–¥–Ω–∏–π –æ—Ç–±–æ–π',
      description: '–õ–µ—á—å —Å–ø–∞—Ç—å –Ω–∞ —á–∞—Å –ø–æ–∑–∂–µ',
      icon: 'üõèÔ∏è',
      category: RewardCategory.SPECIAL,
      rarity: Rarity.COMMON,
      bronzeCost: 10,
    },
    {
      name: '–°–µ–º–µ–π–Ω–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ',
      description: '–¶–µ–ª—ã–π –¥–µ–Ω—å –ø–æ—Å–≤—è—â–µ–Ω —Ç–≤–æ–∏–º –∏–Ω—Ç–µ—Ä–µ—Å–∞–º',
      icon: 'üó∫Ô∏è',
      category: RewardCategory.SPECIAL,
      rarity: Rarity.LEGENDARY,
      goldCost: 10,
      stock: 1,
    }
  ]

  for (const rewardData of rewards) {
    await prisma.reward.create({
      data: {
        guildId: guild.id,
        ...rewardData,
      }
    })
  }

  console.log('üõí Created test rewards')

  // Create test achievements
  const achievements = [
    {
      name: '–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏',
      description: '–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–≤—ã–π –∫–≤–µ—Å—Ç',
      icon: 'üéØ',
      category: AchievementCategory.QUESTS,
      rarity: Rarity.COMMON,
      maxProgress: 1,
      expReward: 50,
      bronzeReward: 5,
    },
    {
      name: '–ú–∞—Å—Ç–µ—Ä –∫–≤–µ—Å—Ç–æ–≤',
      description: '–í—ã–ø–æ–ª–Ω–∏—Ç—å 50 –∫–≤–µ—Å—Ç–æ–≤',
      icon: '‚öîÔ∏è',
      category: AchievementCategory.QUESTS,
      rarity: Rarity.EPIC,
      maxProgress: 50,
      expReward: 500,
      goldReward: 3,
      titleReward: '–ú–∞—Å—Ç–µ—Ä –ö–≤–µ—Å—Ç–æ–≤',
    },
    {
      name: '–ù–µ–¥–µ–ª—è —Å–∏–ª—ã',
      description: '7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–≤–µ—Å—Ç—ã',
      icon: 'üî•',
      category: AchievementCategory.STREAKS,
      rarity: Rarity.COMMON,
      maxProgress: 7,
      expReward: 100,
      silverReward: 3,
    },
    {
      name: '–û–ø—ã—Ç–Ω—ã–π –∞–≤–∞–Ω—Ç—é—Ä–∏—Å—Ç',
      description: '–î–æ—Å—Ç–∏—á—å 5 —É—Ä–æ–≤–Ω—è',
      icon: '‚≠ê',
      category: AchievementCategory.PROGRESSION,
      rarity: Rarity.COMMON,
      maxProgress: 5,
      expReward: 200,
      silverReward: 5,
    },
    {
      name: '–ü–æ–º–æ—â–Ω–∏–∫ —Å–µ–º—å–∏',
      description: '–í—ã–ø–æ–ª–Ω–∏—Ç—å 20 —Å–µ–º–µ–π–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤',
      icon: 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶',
      category: AchievementCategory.SPECIAL,
      rarity: Rarity.RARE,
      maxProgress: 20,
      expReward: 200,
      silverReward: 8,
    },
    {
      name: '–õ–µ–≥–µ–Ω–¥–∞ –≥–∏–ª—å–¥–∏–∏',
      description: '–í—ã–ø–æ–ª–Ω–∏—Ç—å 200 –∫–≤–µ—Å—Ç–æ–≤ –∏ –¥–æ—Å—Ç–∏—á—å 15 —É—Ä–æ–≤–Ω—è',
      icon: 'üëë',
      category: AchievementCategory.LEGENDARY,
      rarity: Rarity.LEGENDARY,
      maxProgress: 1,
      expReward: 2000,
      goldReward: 10,
      titleReward: '–õ–µ–≥–µ–Ω–¥–∞ –ì–∏–ª—å–¥–∏–∏',
    }
  ]

  for (const achievementData of achievements) {
    await prisma.achievement.create({
      data: {
        guildId: guild.id,
        ...achievementData,
      }
    })
  }

  console.log('üèÜ Created test achievements')

  // Create character achievements (progress tracking)
  const allAchievements = await prisma.achievement.findMany({ where: { guildId: guild.id } })
  
  for (const achievement of allAchievements) {
    // Alice's achievements
    let progress = 0
    let unlocked = false
    let unlockedAt = null

    if (achievement.name === '–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏') {
      progress = 1
      unlocked = true
      unlockedAt = new Date('2024-01-15')
    } else if (achievement.name === '–ú–∞—Å—Ç–µ—Ä –∫–≤–µ—Å—Ç–æ–≤') {
      progress = 23
    } else if (achievement.name === '–ù–µ–¥–µ–ª—è —Å–∏–ª—ã') {
      progress = 5
    } else if (achievement.name === '–û–ø—ã—Ç–Ω—ã–π –∞–≤–∞–Ω—Ç—é—Ä–∏—Å—Ç') {
      progress = 7
      unlocked = true
      unlockedAt = new Date('2024-01-10')
    } else if (achievement.name === '–ü–æ–º–æ—â–Ω–∏–∫ —Å–µ–º—å–∏') {
      progress = 12
    }

    await prisma.characterAchievement.create({
      data: {
        characterId: aliceCharacter.id,
        achievementId: achievement.id,
        progress,
        unlocked,
        unlockedAt,
      }
    })

    // Max's achievements (lower progress)
    let maxProgress = Math.floor(progress * 0.6)
    let maxUnlocked = false
    let maxUnlockedAt = null

    if (achievement.name === '–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏') {
      maxProgress = 1
      maxUnlocked = true
      maxUnlockedAt = new Date('2024-01-20')
    } else if (achievement.name === '–û–ø—ã—Ç–Ω—ã–π –∞–≤–∞–Ω—Ç—é—Ä–∏—Å—Ç') {
      maxProgress = 4
    }

    await prisma.characterAchievement.create({
      data: {
        characterId: maxCharacter.id,
        achievementId: achievement.id,
        progress: maxProgress,
        unlocked: maxUnlocked,
        unlockedAt: maxUnlockedAt,
      }
    })
  }

  console.log('üìä Created character achievement progress')

  // Create test inventory items
  const inventoryItems = [
    {
      characterId: aliceCharacter.id,
      name: '30 –º–∏–Ω—É—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
      description: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∏–≥—Ä',
      icon: 'üì±',
      category: ItemCategory.REWARD,
      rarity: Rarity.COMMON,
      quantity: 2,
      obtainedAt: new Date('2024-01-15'),
    },
    {
      characterId: aliceCharacter.id,
      name: '–í–µ—á–µ—Ä –∫–∏–Ω–æ',
      description: '–ü—Ä–∞–≤–æ –≤—ã–±—Ä–∞—Ç—å —Ñ–∏–ª—å–º –Ω–∞ –≤–µ—á–µ—Ä',
      icon: 'üé¨',
      category: ItemCategory.REWARD,
      rarity: Rarity.RARE,
      quantity: 1,
      obtainedAt: new Date('2024-01-12'),
    },
    {
      characterId: aliceCharacter.id,
      name: '5 –µ–≤—Ä–æ',
      description: '–ö–∞—Ä–º–∞–Ω–Ω—ã–µ –¥–µ–Ω—å–≥–∏',
      icon: 'üíµ',
      category: ItemCategory.REWARD,
      rarity: Rarity.RARE,
      quantity: 1,
      obtainedAt: new Date('2024-01-10'),
    },
    {
      characterId: aliceCharacter.id,
      name: '–ü–æ–∑–¥–Ω–∏–π –æ—Ç–±–æ–π',
      description: '–ú–æ–∂–Ω–æ –ª–µ—á—å —Å–ø–∞—Ç—å –Ω–∞ —á–∞—Å –ø–æ–∑–∂–µ',
      icon: 'üõèÔ∏è',
      category: ItemCategory.REWARD,
      rarity: Rarity.COMMON,
      quantity: 3,
      obtainedAt: new Date('2024-01-08'),
      expiresAt: new Date('2024-02-08'),
    },
    {
      characterId: aliceCharacter.id,
      name: '–ó–∞—Ä—è–¥ —ç–Ω–µ—Ä–≥–∏–∏',
      description: '+50% –æ–ø—ã—Ç–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å',
      icon: '‚ö°',
      category: ItemCategory.CONSUMABLE,
      rarity: Rarity.EPIC,
      quantity: 1,
      obtainedAt: new Date('2024-01-14'),
    },
    {
      characterId: aliceCharacter.id,
      name: '–ü—Ä–æ–ø—É—Å–∫ –∑–∞–¥–∞–Ω–∏—è',
      description: '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–¥–Ω–æ –∑–∞–¥–∞–Ω–∏–µ –±–µ–∑ —à—Ç—Ä–∞—Ñ–∞',
      icon: 'üèÉ‚Äç‚ôÇÔ∏è',
      category: ItemCategory.CONSUMABLE,
      rarity: Rarity.RARE,
      quantity: 1,
      obtainedAt: new Date('2024-01-13'),
    },
    {
      characterId: aliceCharacter.id,
      name: '–ë–∏–ª–µ—Ç –Ω–∞ —Å–µ–º–µ–π–Ω–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ',
      description: '–ü—Ä–∞–≤–æ –≤—ã–±—Ä–∞—Ç—å —Å–µ–º–µ–π–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö',
      icon: 'üéüÔ∏è',
      category: ItemCategory.SPECIAL,
      rarity: Rarity.LEGENDARY,
      quantity: 1,
      obtainedAt: new Date('2024-01-05'),
    },
    {
      characterId: aliceCharacter.id,
      name: '–í—ã–±–æ—Ä —É–∂–∏–Ω–∞',
      description: '–†–µ—à–∏—Ç—å, —á—Ç–æ —Å–µ–º—å—è –±—É–¥–µ—Ç –µ—Å—Ç—å –Ω–∞ —É–∂–∏–Ω',
      icon: 'üçΩÔ∏è',
      category: ItemCategory.SPECIAL,
      rarity: Rarity.COMMON,
      quantity: 1,
      used: true,
      obtainedAt: new Date('2024-01-11'),
    },
    // Titles for Alice
    {
      characterId: aliceCharacter.id,
      name: '–ú–∞—Å—Ç–µ—Ä –ü–æ—Ä—è–¥–∫–∞',
      description: '–ó–∞ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —á–∏—Å—Ç–æ—Ç—ã –≤ –¥–æ–º–µ',
      icon: 'üåü',
      category: ItemCategory.TITLE,
      rarity: Rarity.RARE,
      quantity: 1,
      usable: false,
      obtainedAt: new Date('2024-01-05'),
    },
    {
      characterId: aliceCharacter.id,
      name: '–ö–Ω–∏–∂–Ω—ã–π –ß–µ—Ä–≤—å',
      description: '–ó–∞ –ª—é–±–æ–≤—å –∫ —á—Ç–µ–Ω–∏—é',
      icon: 'üìö',
      category: ItemCategory.TITLE,
      rarity: Rarity.COMMON,
      quantity: 1,
      usable: false,
      obtainedAt: new Date('2024-01-08'),
    },
    {
      characterId: aliceCharacter.id,
      name: '–°–ø–æ—Ä—Ç—Å–º–µ–Ω',
      description: '–ó–∞ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è',
      icon: 'üí™',
      category: ItemCategory.TITLE,
      rarity: Rarity.COMMON,
      quantity: 1,
      usable: false,
      obtainedAt: new Date('2024-01-12'),
    }
  ]

  for (const itemData of inventoryItems) {
    await prisma.inventoryItem.create({
      data: itemData,
    })
  }

  console.log('üéí Created test inventory items')

  // Create test purchases
  const phoneReward = await prisma.reward.findFirst({ where: { name: '30 –º–∏–Ω—É—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞' } })
  if (phoneReward) {
    await prisma.purchase.create({
      data: {
        characterId: aliceCharacter.id,
        rewardId: phoneReward.id,
        quantity: 1,
        totalCost: { bronze: 0, silver: 3, gold: 0 },
        status: 'REDEEMED',
        purchasedAt: new Date('2024-01-14'),
        redeemedAt: new Date('2024-01-15'),
      }
    })
  }

  console.log('üí∞ Created test purchases')

  // Create test activity logs
  const activities = [
    {
      guildId: guild.id,
      characterId: aliceCharacter.id,
      type: ActivityType.QUEST_COMPLETED,
      title: '–ö–≤–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω',
      description: '–í—ã–ø–æ–ª–Ω–∏–ª "–£—Ç—Ä–µ–Ω–Ω—è—è –∑–∞—Ä—è–¥–∫–∞"',
      icon: '‚úÖ',
      metadata: { questId: 'quest-1', expGained: 50 },
      createdAt: new Date('2024-01-15T09:30:00Z'),
    },
    {
      guildId: guild.id,
      characterId: aliceCharacter.id,
      type: ActivityType.ACHIEVEMENT_UNLOCKED,
      title: '–ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ',
      description: '–ü–æ–ª—É—á–µ–Ω —Ç–∏—Ç—É–ª "–ú–∞—Å—Ç–µ—Ä –ü–æ—Ä—è–¥–∫–∞"',
      icon: 'üèÜ',
      metadata: { achievementId: 'achievement-1' },
      createdAt: new Date('2024-01-14T18:00:00Z'),
    },
    {
      guildId: guild.id,
      characterId: aliceCharacter.id,
      type: ActivityType.LEVEL_UP,
      title: '–ü–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è',
      description: '–î–æ—Å—Ç–∏–≥–Ω—É—Ç 7 —É—Ä–æ–≤–µ–Ω—å!',
      icon: 'üéâ',
      metadata: { newLevel: 7 },
      createdAt: new Date('2024-01-13T14:20:00Z'),
    },
    {
      guildId: guild.id,
      characterId: aliceCharacter.id,
      type: ActivityType.EFFECT_GAINED,
      title: '–ù–æ–≤—ã–π —ç—Ñ—Ñ–µ–∫—Ç',
      description: '–ü–æ–ª—É—á–µ–Ω–æ "–ë–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–µ –¢—Ä—É–¥–æ–ª—é–±–∏—è"',
      icon: '‚ú®',
      metadata: { effectId: 'effect-1' },
      createdAt: new Date('2024-01-12T16:45:00Z'),
    },
    {
      guildId: guild.id,
      characterId: aliceCharacter.id,
      type: ActivityType.PURCHASE_MADE,
      title: '–ü–æ–∫—É–ø–∫–∞ –≤ –º–∞–≥–∞–∑–∏–Ω–µ',
      description: '–ö—É–ø–ª–µ–Ω–æ "30 –º–∏–Ω—É—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞"',
      icon: 'üõí',
      metadata: { purchaseId: 'purchase-1' },
      createdAt: new Date('2024-01-14T10:00:00Z'),
    },
    {
      guildId: guild.id,
      characterId: maxCharacter.id,
      type: ActivityType.JOINED_GUILD,
      title: '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –≥–∏–ª—å–¥–∏–∏',
      description: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ "–°–µ–º—å—è –î—Ä–∞–∫–æ–Ω–æ–±–æ—Ä—Ü–µ–≤"!',
      icon: 'üè∞',
      metadata: { guildId: guild.id },
      createdAt: new Date('2024-01-20T12:00:00Z'),
    }
  ]

  for (const activityData of activities) {
    await prisma.activityLog.create({
      data: activityData,
    })
  }

  console.log('üìà Created test activity logs')

  console.log('‚úÖ Database seeding completed successfully!')
  
  // Print summary
  const summary = {
    users: await prisma.user.count(),
    guilds: await prisma.guild.count(),
    characters: await prisma.character.count(),
    quests: await prisma.quest.count(),
    effects: await prisma.effect.count(),
    rewards: await prisma.reward.count(),
    achievements: await prisma.achievement.count(),
    inventoryItems: await prisma.inventoryItem.count(),
    activityLogs: await prisma.activityLog.count(),
  }

  console.log('\nüìä Database Summary:')
  console.log(`üë• Users: ${summary.users}`)
  console.log(`üè∞ Guilds: ${summary.guilds}`)
  console.log(`‚öîÔ∏è Characters: ${summary.characters}`)
  console.log(`üéØ Quests: ${summary.quests}`)
  console.log(`üé≠ Effects: ${summary.effects}`)
  console.log(`üõí Rewards: ${summary.rewards}`)
  console.log(`üèÜ Achievements: ${summary.achievements}`)
  console.log(`üéí Inventory Items: ${summary.inventoryItems}`)
  console.log(`üìà Activity Logs: ${summary.activityLogs}`)
}

main()
  .catch((e) => {
    console.error('‚ùå Error during seeding:', e)
    process.exit(1)
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
