generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(PLAYER)
  guildId       String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts   Account[]
  sessions   Session[]
  guild      Guild?     @relation(fields: [guildId], references: [id])
  characters Character[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Application models
model Guild {
  id          String   @id @default(cuid())
  name        String
  description String?
  code        String   @unique // 6-character code for joining
  memberCount Int      @default(0)
  activeQuests Int     @default(0)
  completedToday Int   @default(0)
  ownerId     String   // The user who created the guild
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users          User[]
  characters     Character[]
  quests         Quest[]
  rewards        Reward[]
  achievements   Achievement[]
  activityLogs   ActivityLog[]

  @@map("guilds")
}

model Character {
  id             String @id @default(cuid())
  userId         String
  guildId        String
  name           String
  class          String @default("adventurer")
  avatar         String @default("⚔️")
  level          Int    @default(1)
  experience     Int    @default(0)
  maxExperience  Int    @default(200) // XP needed for next level
  bronzeCoins    Int    @default(0)
  silverCoins    Int    @default(0)
  goldCoins      Int    @default(0)
  isOnline       Boolean @default(false)
  lastActive     DateTime @default(now())
  streak         Int    @default(0) // Days in a row completing quests
  completedQuests Int   @default(0)
  totalGoldEarned Int   @default(0)
  activeTitle    String? // Current equipped title
  
  // Relations
  user             User              @relation(fields: [userId], references: [id])
  guild            Guild             @relation(fields: [guildId], references: [id])
  quests           Quest[]
  effects          Effect[]
  purchases        Purchase[]
  inventoryItems   InventoryItem[]
  characterAchievements CharacterAchievement[]
  activityLogs     ActivityLog[]

  @@unique([userId, guildId]) // One character per user per guild
  @@map("characters")
}

model Quest {
  id           String      @id @default(cuid())
  guildId      String
  characterId  String?
  title        String
  description  String
  type         QuestType
  status       QuestStatus @default(AVAILABLE)
  difficulty   Int         @default(1)
  expReward    Int         @default(0)
  bronzeReward Int         @default(0)
  silverReward Int         @default(0)
  goldReward   Int         @default(0)
  dueDate      DateTime?   // For time-limited quests
  progress     Int         @default(0) // Current progress
  maxProgress  Int         @default(1) // Progress needed to complete
  createdAt    DateTime    @default(now())
  startedAt    DateTime?   // When character accepted quest
  completedAt  DateTime?
  approvedAt   DateTime?

  // Relations
  guild     Guild      @relation(fields: [guildId], references: [id])
  character Character? @relation(fields: [characterId], references: [id])

  @@map("quests")
}

model Effect {
  id          String     @id @default(cuid())
  characterId String
  name        String
  type        EffectType
  description String
  icon        String
  duration    Int        // Days remaining
  maxDuration Int        // Original duration
  multipliers Json?      // XP, coin multipliers etc
  restrictions Json?     // Quest type blocks, shop blocks etc
  bonuses     Json?      // Bonus rewards, extra quest slots etc
  reason      String?    // Why this effect was applied
  createdAt   DateTime   @default(now())

  // Relations
  character Character @relation(fields: [characterId], references: [id])

  @@map("effects")
}

model Reward {
  id          String @id @default(cuid())
  guildId     String
  name        String
  description String
  icon        String
  bronzeCost  Int    @default(0)
  silverCost  Int    @default(0)
  goldCost    Int    @default(0)
  category    RewardCategory
  rarity      Rarity @default(COMMON)
  isActive    Boolean @default(true)
  stock       Int?   // Null = unlimited, number = limited stock
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  
  // Relations
  guild     Guild      @relation(fields: [guildId], references: [id])
  purchases Purchase[]

  @@map("rewards")
}

model Purchase {
  id          String   @id @default(cuid())
  characterId String
  rewardId    String
  quantity    Int      @default(1)
  totalCost   Json     // {bronze: 0, silver: 0, gold: 1}
  status      PurchaseStatus @default(PENDING)
  purchasedAt DateTime @default(now())
  redeemedAt  DateTime?

  // Relations
  character Character @relation(fields: [characterId], references: [id])
  reward    Reward    @relation(fields: [rewardId], references: [id])

  @@map("purchases")
}

model Achievement {
  id           String @id @default(cuid())
  guildId      String
  name         String
  description  String
  icon         String
  category     AchievementCategory
  rarity       Rarity @default(COMMON)
  maxProgress  Int    @default(1)
  expReward    Int    @default(0)
  bronzeReward Int    @default(0)
  silverReward Int    @default(0)
  goldReward   Int    @default(0)
  titleReward  String? // Title granted when achievement is unlocked
  isActive     Boolean @default(true)
  
  // Relations
  guild                 Guild                   @relation(fields: [guildId], references: [id])
  characterAchievements CharacterAchievement[]

  @@map("achievements")
}

model CharacterAchievement {
  id            String    @id @default(cuid())
  characterId   String
  achievementId String
  progress      Int       @default(0)
  unlocked      Boolean   @default(false)
  unlockedAt    DateTime?

  // Relations
  character   Character   @relation(fields: [characterId], references: [id])
  achievement Achievement @relation(fields: [achievementId], references: [id])

  @@unique([characterId, achievementId])
  @@map("character_achievements")
}

model InventoryItem {
  id          String    @id @default(cuid())
  characterId String
  name        String
  description String
  icon        String
  category    ItemCategory
  rarity      Rarity    @default(COMMON)
  quantity    Int       @default(1)
  usable      Boolean   @default(true)
  used        Boolean   @default(false)
  obtainedAt  DateTime  @default(now())
  expiresAt   DateTime?

  // Relations
  character Character @relation(fields: [characterId], references: [id])

  @@map("inventory_items")
}

model ActivityLog {
  id          String       @id @default(cuid())
  guildId     String
  characterId String?
  type        ActivityType
  title       String
  description String
  icon        String
  metadata    Json?        // Additional data about the activity
  createdAt   DateTime     @default(now())

  // Relations
  guild     Guild      @relation(fields: [guildId], references: [id])
  character Character? @relation(fields: [characterId], references: [id])

  @@map("activity_logs")
}

// Enums
enum UserRole {
  GUILDMASTER
  PLAYER
}

enum QuestType {
  DAILY
  WEEKLY
  SPECIAL
  GROUP
  EDUCATION
  PHYSICAL
  CREATIVE
  FAMILY
}

enum QuestStatus {
  AVAILABLE
  IN_PROGRESS
  COMPLETED
  APPROVED
  EXPIRED
}

enum EffectType {
  BLESSING
  CURSE
  BUFF
  DEBUFF
  DISEASE
}

enum PurchaseStatus {
  PENDING
  APPROVED
  REDEEMED
  EXPIRED
}

enum RewardCategory {
  ENTERTAINMENT
  MONEY
  ACTIVITIES
  CREATIVE
  SPECIAL
}

enum AchievementCategory {
  QUESTS
  STREAKS
  PROGRESSION
  SPECIAL
  LEGENDARY
}

enum ItemCategory {
  REWARD
  TITLE
  CONSUMABLE
  SPECIAL
}

enum Rarity {
  COMMON
  RARE
  EPIC
  LEGENDARY
}

enum ActivityType {
  QUEST_COMPLETED
  ACHIEVEMENT_UNLOCKED
  LEVEL_UP
  EFFECT_GAINED
  PURCHASE_MADE
  JOINED_GUILD
}
