#!/usr/bin/env node

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ The F-Guild...\n');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
function runCommand(command, description) {
  try {
    console.log(`‚è≥ ${description}...`);
    const output = execSync(command, { encoding: 'utf8', stdio: 'pipe' });
    console.log(`‚úÖ ${description} - —É—Å–ø–µ—à–Ω–æ`);
    return output;
  } catch (error) {
    console.log(`‚ùå ${description} - –æ—à–∏–±–∫–∞:`);
    console.log(error.message);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–æ–≤
function checkFile(filePath, description) {
  try {
    if (fs.existsSync(filePath)) {
      console.log(`‚úÖ ${description} - –Ω–∞–π–¥–µ–Ω`);
      return true;
    } else {
      console.log(`‚ùå ${description} - –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      return false;
    }
  } catch (error) {
    console.log(`‚ùå ${description} - –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏`);
    return false;
  }
}

async function main() {
  console.log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–π–ª—ã
  const files = [
    ['package.json', 'Package.json'],
    ['prisma/schema.prisma', 'Prisma —Å—Ö–µ–º–∞'],
    ['prisma/seed.ts', 'Seed —Ñ–∞–π–ª'],
    ['src/lib/prisma.ts', 'Prisma –∫–ª–∏–µ–Ω—Ç']
  ];

  let filesOk = true;
  files.forEach(([file, desc]) => {
    if (!checkFile(file, desc)) {
      filesOk = false;
    }
  });

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º .env —Ñ–∞–π–ª
  if (!checkFile('.env', '.env —Ñ–∞–π–ª')) {
    console.log('‚è≥ –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π .env —Ñ–∞–π–ª...');
    try {
      fs.writeFileSync('.env', 'DATABASE_URL="file:./dev.db"\nNEXTAUTH_SECRET="your-secret-key"\nNEXTAUTH_URL="http://localhost:3000"\n');
      console.log('‚úÖ .env —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω');
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è .env —Ñ–∞–π–ª–∞');
      filesOk = false;
    }
  }

  if (!filesOk) {
    console.log('\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–∞–π–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–æ–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ.');
    return;
  }

  console.log('\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
  if (!fs.existsSync('node_modules')) {
    console.log('‚è≥ node_modules –Ω–µ –Ω–∞–π–¥–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...');
    runCommand('npm install', '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π');
  } else {
    console.log('‚úÖ node_modules –Ω–∞–π–¥–µ–Ω');
  }

  console.log('\nüóÑÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:');

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Prisma –∫–ª–∏–µ–Ω—Ç
  runCommand('npx prisma generate', '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è Prisma –∫–ª–∏–µ–Ω—Ç–∞');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
  if (!fs.existsSync('prisma/dev.db')) {
    console.log('‚è≥ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º...');
    
    // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é
    const migrateResult = runCommand('npx prisma migrate dev --name init', '–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
    
    if (migrateResult !== null) {
      console.log('‚è≥ –ó–∞–ø–æ–ª–Ω—è–µ–º –±–∞–∑—É —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...');
      runCommand('npx tsx prisma/seed.ts', '–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏');
    } else {
      console.log('‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ db:push:');
      runCommand('npx prisma db push', '–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ö–µ–º—ã –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      runCommand('npx tsx prisma/seed.ts', '–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏');
    }
  } else {
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω–∞');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
    try {
      const { PrismaClient } = require('@prisma/client');
      const prisma = new PrismaClient();
      
      const userCount = await prisma.user.count();
      const questCount = await prisma.quest.count();
      
      if (userCount === 0 || questCount === 0) {
        console.log('‚è≥ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...');
        runCommand('npx tsx prisma/seed.ts', '–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏');
      } else {
        console.log(`‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ (${userCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, ${questCount} –∫–≤–µ—Å—Ç–æ–≤)`);
      }
      
      await prisma.$disconnect();
    } catch (error) {
      console.log('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –Ω–æ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ');
      console.log('üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å: npm run db:seed');
    }
  }

  console.log('\nüéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
  
  console.log('\nüìñ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
  console.log('1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run dev');
  console.log('2. –û—Ç–∫—Ä–æ–π—Ç–µ: http://localhost:3000/player');
  console.log('3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞');
  console.log('4. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏: npm run db:studio (–¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ë–î)');
  
  console.log('\nüß™ –¢–µ—Å—Ç–æ–≤—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏:');
  console.log('‚Ä¢ –ê–ª–∏—Å–∞ (alice-char-id) - –£—Ä–æ–≤–µ–Ω—å 7, –∞–∫—Ç–∏–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã');
  console.log('‚Ä¢ –ú–∞–∫—Å (max-char-id) - –£—Ä–æ–≤–µ–Ω—å 4, –ø—Ä–æ–∫–ª—è—Ç–∏–µ –±–µ—Å–ø–æ—Ä—è–¥–∫–∞');

  console.log('\nüõ†Ô∏è  –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:');
  console.log('‚Ä¢ npm run db:reset    - —Å–±—Ä–æ—Å –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –ë–î');
  console.log('‚Ä¢ npm run db:seed     - –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏');
  console.log('‚Ä¢ npm run db:studio   - –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –ë–î');
}

main().catch(console.error);
