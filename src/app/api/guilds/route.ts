import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'
import { getServerSession } from 'next-auth'
import { authOptions } from '../auth/[...nextauth]/route'

// Generate a unique 6-character guild code
function generateGuildCode(): string {
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'
  let result = ''
  for (let i = 0; i < 6; i++) {
    result += chars.charAt(Math.floor(Math.random() * chars.length))
  }
  return result
}

export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions)
    
    if (!session?.user?.email) {
      return NextResponse.json({ error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' }, { status: 401 })
    }

    const { name, description } = await request.json()

    if (!name) {
      return NextResponse.json({ error: '–ù–∞–∑–≤–∞–Ω–∏–µ –≥–∏–ª—å–¥–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' }, { status: 400 })
    }

    // Check if user already has a guild
    const existingUser = await prisma.user.findUnique({
      where: { email: session.user.email },
      include: { guild: true }
    })

    if (existingUser?.guild) {
      return NextResponse.json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –≥–∏–ª—å–¥–∏–∏' }, { status: 400 })
    }

    // Generate unique code
    let code = generateGuildCode()
    let isUnique = false
    
    while (!isUnique) {
      const existing = await prisma.guild.findUnique({
        where: { code }
      })
      if (!existing) {
        isUnique = true
      } else {
        code = generateGuildCode()
      }
    }

    // Create user if doesn't exist
    let user = existingUser
    if (!user) {
      user = await prisma.user.create({
        data: {
          email: session.user.email,
          name: session.user.name,
          image: session.user.image,
          role: 'GUILDMASTER'
        }
      })
    } else {
      // Update role to GUILDMASTER
      user = await prisma.user.update({
        where: { id: user.id },
        data: { role: 'GUILDMASTER' }
      })
    }

    // Create guild
    const guild = await prisma.guild.create({
      data: {
        name,
        description,
        code,
        ownerId: user.id,
        memberCount: 1
      }
    })

    // Update user with guild
    await prisma.user.update({
      where: { id: user.id },
      data: { guildId: guild.id }
    })

    // Create default rewards for the guild
    const defaultRewards = [
      {
        name: '30 –º–∏–Ω—É—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
        description: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Å –ª—é–±–∏–º—ã–º–∏ –∏–≥—Ä–∞–º–∏',
        icon: 'üì±',
        silverCost: 3,
        category: 'screen_time'
      },
      {
        name: '1 —á–∞—Å –∏–≥—Ä',
        description: '–í—Ä–µ–º—è –¥–ª—è –ª—é–±–∏–º—ã—Ö –≤–∏–¥–µ–æ–∏–≥—Ä',
        icon: 'üéÆ',
        goldCost: 1,
        category: 'screen_time'
      },
      {
        name: '1 –µ–≤—Ä–æ',
        description: '–†–µ–∞–ª—å–Ω—ã–µ –¥–µ–Ω—å–≥–∏ –Ω–∞ –∫–∞—Ä–º–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã',
        icon: 'üí∞',
        goldCost: 1,
        category: 'money'
      },
      {
        name: '–ü–æ—Ö–æ–¥ –≤ –∫–∏–Ω–æ',
        description: '–°–µ–º–µ–π–Ω—ã–π –ø–æ—Ö–æ–¥ –≤ –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä',
        icon: 'üçø',
        goldCost: 3,
        category: 'activity'
      },
      {
        name: '–ü–æ–∑–¥–Ω–∏–π –æ—Ç–±–æ–π',
        description: '–õ–µ—á—å —Å–ø–∞—Ç—å –Ω–∞ —á–∞—Å –ø–æ–∑–∂–µ',
        icon: 'üõèÔ∏è',
        bronzeCost: 10,
        category: 'privilege'
      },
      {
        name: '–í—ã–±–æ—Ä —É–∂–∏–Ω–∞',
        description: '–í—ã–±—Ä–∞—Ç—å, —á—Ç–æ –±—É–¥–µ–º –µ—Å—Ç—å –Ω–∞ —É–∂–∏–Ω',
        icon: 'üçï',
        bronzeCost: 5,
        category: 'privilege'
      }
    ]

    await prisma.reward.createMany({
      data: defaultRewards.map(reward => ({
        ...reward,
        guildId: guild.id
      }))
    })

    return NextResponse.json({
      guild: {
        id: guild.id,
        name: guild.name,
        code: guild.code,
        description: guild.description
      }
    })

  } catch (error) {
    console.error('Error creating guild:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url)
    const code = searchParams.get('code')

    if (!code) {
      return NextResponse.json({ error: '–ö–æ–¥ –≥–∏–ª—å–¥–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' }, { status: 400 })
    }

    const guild = await prisma.guild.findUnique({
      where: { code: code.toUpperCase() },
      select: {
        id: true,
        name: true,
        description: true,
        memberCount: true,
        code: true
      }
    })

    if (!guild) {
      return NextResponse.json({ error: '–ì–∏–ª—å–¥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' }, { status: 404 })
    }

    return NextResponse.json(guild)

  } catch (error) {
    console.error('Guild search error:', error)
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    )
  }
}