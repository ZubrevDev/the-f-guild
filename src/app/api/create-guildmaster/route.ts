import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'
import bcrypt from 'bcryptjs'

// Generate a unique 6-character guild code
function generateGuildCode(): string {
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'
  let result = ''
  for (let i = 0; i < 6; i++) {
    result += chars.charAt(Math.floor(Math.random() * chars.length))
  }
  return result
}

export async function POST(request: NextRequest) {
  try {
    const { name, email, password, guildName, guildDescription } = await request.json()

    if (!name || !email || !password || !guildName) {
      return NextResponse.json({ 
        error: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' 
      }, { status: 400 })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const existingUser = await prisma.user.findUnique({
      where: { email }
    })

    if (existingUser) {
      return NextResponse.json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' }, { status: 400 })
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –≥–∏–ª—å–¥–∏–∏
    let code = generateGuildCode()
    let existingGuild = await prisma.guild.findUnique({ where: { code } })
    
    while (existingGuild) {
      code = generateGuildCode()
      existingGuild = await prisma.guild.findUnique({ where: { code } })
    }

    // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
    const hashedPassword = await bcrypt.hash(password, 12)

    // –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≥–∏–ª—å–¥–∏–∏ –∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    const result = await prisma.$transaction(async (tx) => {
      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await tx.user.create({
        data: {
          email,
          name,
          password: hashedPassword,
          role: 'GUILDMASTER',
        }
      })

      // –°–æ–∑–¥–∞–µ–º –≥–∏–ª—å–¥–∏—é
      const guild = await tx.guild.create({
        data: {
          name: guildName,
          description: guildDescription || null,
          code,
          ownerId: user.id,
          memberCount: 1
        }
      })

      // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≥–∏–ª—å–¥–∏–∏
      await tx.user.update({
        where: { id: user.id },
        data: { guildId: guild.id }
      })

      // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≥–∏–ª—å–¥–º–∞—Å—Ç–µ—Ä–∞
      const character = await tx.character.create({
        data: {
          userId: user.id,
          guildId: guild.id,
          name,
          class: 'guildmaster',
          avatar: 'üëë',
          level: 1,
          experience: 0,
          bronzeCoins: 100,
          silverCoins: 10,
          goldCoins: 1
        }
      })

      return { user, guild, character }
    })

    return NextResponse.json({
      success: true,
      user: {
        id: result.user.id,
        email: result.user.email,
        name: result.user.name
      },
      guild: {
        id: result.guild.id,
        name: result.guild.name,
        code: result.guild.code,
        description: result.guild.description
      },
      character: {
        id: result.character.id,
        name: result.character.name
      }
    })

  } catch (error) {
    console.error('Guild master creation error:', error)
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    )
  }
}
