#!/usr/bin/env node

const { execSync } = require('child_process');
const fs = require('fs');

console.log('ü©∫ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º...\n');

// –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
const colors = {
  red: '\x1b[31m',
  green: '\x1b[32m', 
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  reset: '\x1b[0m'
};

function log(color, message) {
  console.log(colors[color] + message + colors.reset);
}

function checkFile(path, description) {
  if (fs.existsSync(path)) {
    log('green', `‚úÖ ${description}`);
    return true;
  } else {
    log('red', `‚ùå ${description}`);
    return false;
  }
}

function runCommand(command, description, optional = false) {
  try {
    log('blue', `üîß ${description}...`);
    execSync(command, { stdio: optional ? 'pipe' : 'inherit' });
    log('green', `‚úÖ ${description} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ`);
    return true;
  } catch (error) {
    log('red', `‚ùå ${description} –Ω–µ —É–¥–∞–ª–æ—Å—å`);
    if (!optional) {
      console.error(error.message);
    }
    return false;
  }
}

function main() {
  log('cyan', '='.repeat(50));
  log('cyan', 'üöÄ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê THE F GUILD');
  log('cyan', '='.repeat(50));

  // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
  log('yellow', '\n1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤:');
  
  const files = [
    ['prisma/schema.prisma', '–°—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö'],
    ['prisma/seed_fixed.ts', '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π seed —Ñ–∞–π–ª'],
    ['src/app/api/character/route.ts', 'API endpoint –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π'],
    ['src/app/api/quests/route.ts', 'API endpoint –¥–ª—è –∫–≤–µ—Å—Ç–æ–≤'],
    ['init-db.js', '–°–∫—Ä–∏–ø—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î'],
    ['check-db.ts', '–°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î']
  ];

  let filesOk = true;
  files.forEach(([path, desc]) => {
    if (!checkFile(path, desc)) {
      filesOk = false;
    }
  });

  // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  log('yellow', '\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:');
  
  if (!checkFile('prisma/dev.db', '–§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö')) {
    log('yellow', '‚ö†Ô∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º...');
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –ë–î –µ—Å–ª–∏ –µ—Å—Ç—å
    try {
      fs.unlinkSync('prisma/dev.db');
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
    if (!runCommand('npx prisma migrate dev --name init', '–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π')) {
      process.exit(1);
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º seed
    if (!runCommand('npx tsx prisma/seed_fixed.ts', '–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏')) {
      process.exit(1);
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç
    runCommand('npx prisma generate', '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è Prisma Client');
  }

  // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ë–î
  log('yellow', '\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:');
  
  if (runCommand('npx tsx check-db.ts', '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î', true)) {
    log('green', '‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
  } else {
    log('yellow', '‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º—ã —Å –¥–∞–Ω–Ω—ã–º–∏, –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –ë–î...');
    
    // –£–¥–∞–ª—è–µ–º –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º
    try {
      fs.unlinkSync('prisma/dev.db');
    } catch (e) {}
    
    runCommand('npx prisma migrate dev --name reinit', '–ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –ë–î');
    runCommand('npx tsx prisma/seed_fixed.ts', '–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö');
  }

  // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
  log('yellow', '\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:');
  
  if (!checkFile('node_modules', 'Node modules')) {
    log('yellow', '‚ö†Ô∏è  –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...');
    runCommand('npm install', '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π');
  } else {
    log('green', '‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
  }

  // 5. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Prisma Client
  log('yellow', '\n5. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Prisma Client:');
  runCommand('npx prisma generate', '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è Prisma Client', true);

  // 6. –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
  log('yellow', '\n6. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞:');
  
  if (runCommand('npx tsx check-db.ts', '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ë–î', true)) {
    log('green', '‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ!');
  } else {
    log('red', '‚ùå –û—Å—Ç–∞–ª–∏—Å—å –ø—Ä–æ–±–ª–µ–º—ã');
  }

  // 7. –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∑–∞–ø—É—Å–∫—É
  log('cyan', '\n' + '='.repeat(50));
  log('cyan', 'üéØ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:');
  log('cyan', '='.repeat(50));
  
  log('green', '\n1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:');
  log('blue', '   npm run dev');
  
  log('green', '\n2. –û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ:');
  log('blue', '   http://localhost:3000/player');
  
  log('green', '\n3. –î–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:');
  log('blue', '   npm run db:check');
  log('blue', '   npm run db:studio');
  
  log('yellow', '\nüí° –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:');
  log('blue', '   npm run fix-db     - –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ë–î');
  log('blue', '   npm run db:check   - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ë–î');
  log('blue', '   npm run db:studio  - –û—Ç–∫—Ä—ã—Ç—å Prisma Studio');
  
  log('cyan', '\nüéâ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!');
}

if (require.main === module) {
  main();
}

module.exports = { main };
